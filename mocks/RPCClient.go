// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import anycable "github.com/anycable/anycable-go/protos"
import context "context"
import grpc "google.golang.org/grpc"
import mock "github.com/stretchr/testify/mock"

// RPCClient is an autogenerated mock type for the RPCClient type
type RPCClient struct {
	mock.Mock
}

// Command provides a mock function with given fields: ctx, in, opts
func (_m *RPCClient) Command(ctx context.Context, in *anycable.CommandMessage, opts ...grpc.CallOption) (*anycable.CommandResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *anycable.CommandResponse
	if rf, ok := ret.Get(0).(func(context.Context, *anycable.CommandMessage, ...grpc.CallOption) *anycable.CommandResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*anycable.CommandResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *anycable.CommandMessage, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Connect provides a mock function with given fields: ctx, in, opts
func (_m *RPCClient) Connect(ctx context.Context, in *anycable.ConnectionRequest, opts ...grpc.CallOption) (*anycable.ConnectionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *anycable.ConnectionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *anycable.ConnectionRequest, ...grpc.CallOption) *anycable.ConnectionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*anycable.ConnectionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *anycable.ConnectionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Disconnect provides a mock function with given fields: ctx, in, opts
func (_m *RPCClient) Disconnect(ctx context.Context, in *anycable.DisconnectRequest, opts ...grpc.CallOption) (*anycable.DisconnectResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *anycable.DisconnectResponse
	if rf, ok := ret.Get(0).(func(context.Context, *anycable.DisconnectRequest, ...grpc.CallOption) *anycable.DisconnectResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*anycable.DisconnectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *anycable.DisconnectRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
